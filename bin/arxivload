#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import feedparser
import fileinput
import urllib2 as urllib
import argparse
import logging as log

bibtex_keys = [ 'author', 'title', 'version', 'date', 'eprinttype', 'eprintclass', 'eprint', 'localfile', 'url' ]
bibtex_format = '\n@Online{{{entry.eprint},\n{bibtex_content}}}\n'

parser = argparse.ArgumentParser()
parser.description = 'Downloads arXiv articles as pdf'
parser.add_argument('arxivid', nargs='+')
parser.add_argument('-v', '--verbose', action='count', help='gives some output')
parser.add_argument('-b', '--bibtex', metavar='file.bib', nargs='+', help='adds entry to a given bibtex file')
args = parser.parse_args()

if args.verbose > 1:
    log.basicConfig(format="%(levelname)s: %(message)s", level=log.DEBUG)
if args.verbose == 1:
    log.basicConfig(format="%(levelname)s: %(message)s", level=log.INFO)
else:
    log.basicConfig(format="%(levelname)s: %(message)s")

for arxiv in args.arxivid:
    url = 'http://export.arxiv.org/api/query?id_list=' + arxiv
    data = urllib.urlopen(url).read()
    
    feedparser._FeedParserMixin.namespaces['http://a9.com/-/spec/opensearch/1.1/'] = 'opensearch'
    feedparser._FeedParserMixin.namespaces['http://arxiv.org/schemas/atom'] = 'arxiv'
    feed = feedparser.parse(data)
    
    for entry in feed.entries:
        entry['eprint'] = entry.id.split('/abs/')[-1]
        entry['date'] = entry.published[0:10]
        entry['author'] = ' and '.join(author.name for author in entry.authors)
        entry['eprintclass'] = 'cs.DS'
        entry['eprinttype'] = 'arxiv'
        entry['version'] = entry['eprint'].split('v')[-1]

        log.info('Found `%s` by `%s`', entry['title'], entry['author'])

        filename = entry['eprint'] + '.pdf'

        for link in entry.links:
            try:
                if link.title == 'pdf':
                    pdflink = link.href
                    entry['url'] = link.href
            except AttributeError:
                pass

    
	if args.bibtex:
            for bib_filename in args.bibtex:
                bibtex_content = ''
		entry['localfile'] = os.path.relpath(filename, os.path.dirname(bib_filename))
                for key in bibtex_keys:
                    bibtex_content += '  {0} = {{{1}}},\n'.format(key, entry[key].encode('utf-8'))
                bibtex_entry = bibtex_format.format(bibtex_content=bibtex_content, entry=entry)

                with open(bib_filename, 'a') as bib_file:
                    bib_file.write(bibtex_entry)
                    log.info('Bibtex entry written to `%s`', bib_filename)

        log.debug('Download URL is `%s`', pdflink)
        pdfdata = urllib.urlopen(pdflink).read()
        with open(filename, 'w') as f:
            f.write(pdfdata)
        log.info('Download saved as `%s`', filename)

