#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import fileinput
import urllib2 as urllib
import argparse
import logging as log
import arxiv

bibtex_keys = [ 'author', 'title', 'version', 'date', 'eprinttype', 'eprintclass', 'eprint', 'localfile', 'url' , 'abstract' ]
bibtex_format = '\n@Online{{{entry.eprint},\n{bibtex_content}}}\n'

def to_bibtex(entry):
    bibtex_content = ''
    for key in bibtex_keys:
        bibtex_content += '  {0} = {{{1}}},\n'.format(key, entry[key].encode('utf-8'))
    return bibtex_format.format(bibtex_content=bibtex_content, entry=entry)

def write_bibtex(entry, bib_filename):
    entry['localfile'] = os.path.relpath(entry['filename'], os.path.dirname(bib_filename))
    with open(bib_filename, 'a') as bib_file:
        bib_file.write(to_bibtex(entry))
    log.info('Bibtex entry written to `%s`', bib_filename)

def download(entry):
    download_url= entry['downloadurl']
    filename = entry['filename']
    log.debug('Download URL is `%s`', download_url)
    data = urllib.urlopen(download_url).read()
    with open(filename, 'w') as f:
        f.write(data)
    log.info('Download saved as `%s`', filename)


parse_values = list(sys.argv)
parse_values.pop(0)
if (len(sys.argv) > 0 and os.path.exists('.arxivload')):
    parse_values.append('@.arxivload')

parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.description = 'Downloads arXiv articles as pdf. Use a .arxivload file to define default arguments.'
parser.add_argument('arxivid', nargs='+')
parser.add_argument('-v', '--verbose', action='count', help='gives some output')
parser.add_argument('-b', '--bibtex', metavar='file.bib', nargs='+', help='adds entry to given bibtex files')
args = parser.parse_args(parse_values)

if args.verbose > 1:
    log.basicConfig(format="%(levelname)s: %(message)s", level=log.DEBUG)
if args.verbose == 1:
    log.basicConfig(format="%(levelname)s: %(message)s", level=log.INFO)
else:
    log.basicConfig(format="%(levelname)s: %(message)s")

for arxiv_id in args.arxivid:
    entry = arxiv.get_by_id(arxiv_id)

    download(entry)
    
    if args.bibtex:
        for bib_filename in args.bibtex:
            write_bibtex(entry, bib_filename)

